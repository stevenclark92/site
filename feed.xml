<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://steveclark.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://steveclark.io/" rel="alternate" type="text/html" /><updated>2024-04-28T15:14:39+01:00</updated><id>https://steveclark.io/feed.xml</id><title type="html">steveclark.io</title><subtitle>tbd</subtitle><entry><title type="html">3D Printing a Transparent PLA Light Diffuser</title><link href="https://steveclark.io/3d_printing/3D-Printing-a-Transparent-Diffuser" rel="alternate" type="text/html" title="3D Printing a Transparent PLA Light Diffuser" /><published>2024-04-27T09:52:00+01:00</published><updated>2024-04-27T09:52:00+01:00</updated><id>https://steveclark.io/3d_printing/3D%20Printing%20a%20Transparent%20Diffuser</id><content type="html" xml:base="https://steveclark.io/3d_printing/3D-Printing-a-Transparent-Diffuser"><![CDATA[<p><img src="https://www.additive-x.com/shop/pub/media/catalog/product/cache/69c0836d7a09588992d42550a1461e94/b/a/bambu_lab_p1s.png" alt="Bambu Lab P1S - without the optional AMS" />
<small class="mt-0 pt-0 italic">I’m working with a Bambu Lab P1S. I love it. As most of my prints are functional rather than decorative, I opted against buying the AMS.<small></small></small></p>

<h2 id="light-diffusion-in-non-oled-displays">Light diffusion in non-OLED displays</h2>

<p>The concept behind edge-lit diffuser panels is fairly straightforward. A light source illuminates the edge of flat piece of transparent material that has been made partially opaque through the inclusion of additives, laser engraving or chemical etching, gently diffusing the light.</p>

<p>The opacity of the material is low enough that 90% of visible light will pass between the panel’s faces unimpeded, but is great enough that the majority of light passing perpendicularly - traversing the material from edge to edge - is not. This light is instead absorbed and scattered by the material’s inclusions, creating a diffuse glow from each face that serves as an excellent source of uniform illumination.</p>

<p>This technique is found ubiquitously in displays, as well as everything from billboards and photography studios to interior design schemes and hospital wards. It’s even been used to create rudimentary touch interfaces by replacing the visible spectrum with a source of infrared and <a href="https://www.instructables.com/Low-Cost-Multi-touch-Whiteboard-using-the-Wii-Remo/" target="_blank">employing the tactical use of a Wiimote</a>.</p>

<h2 id="3d-printing-fdm-a-suitable-prototype-panel">3D printing (FDM) a suitable prototype panel</h2>

<p>My current project involves front lighting an e-paper display. After much research into glass etching techniques and wholesale shipping costs of industrial acrylic, I realised one of the core challenges 3D printing enthusiasts face using transparent FDM filaments - that the end result is typically slightly cloudy - was the answer all along.</p>

<p>My goal is to explore whether or not transparent PLA could be the missing option for those looking for an accessible way of producing evenly diffused lighting for their projects without the need for strong acids, meticulous sanding or shipping metre-long panels of plastic thousands of miles.</p>

<p>Other filaments - particularly PETG and ABS - would ostensibly be better suited to this purpose based on their ability to provide a more transparent end result. The barriers I see with these materials over PLA are the need for a heated enclosure and the amount of VOCs released. While my home setup can overcome the former, the latter is still a primary concern; PLA may not be the perfect material for the job, but it’s certainly safer to print in a small apartment than engineering-grade plastics.</p>

<p>In a similar vein, resin printing would also likely make a good candidate for this, too, but I don’t have access to a resin printer, my partner would likely pack their bags if I bought home any more toys, and I’d rather avoid the use of those chemicals in my home.</p>

<h2 id="selecting-a-filament">Selecting a Filament</h2>

<p>There are an abundance of PLA options on the market with various additives, resultant characteristics, and price points. As the core requirement of this project was accessibility to the greatest number of home enthusiasts, I opted against using a premium option. PLA for the most part - additives or not - is PLA. I simply selected the cheapest transparent option available for next-day shipping from Amazon, which at the time of writing was Elegoo’s Transparent PLA+. I believe this cost £12 (~$15).</p>

<h2 id="dialling-in-print-settings">Dialling in Print Settings</h2>

<p>A material’s transparency and optical characteristics are heavily impacted by its uniformity, which makes achieving an acceptable end result using FDM printing a challenge. Layer lines are part of the issue, but equally, layer adhesion and differences in cooling speed also play a role in the product’s finish. In broad terms, best results are achieved by:</p>

<ul>
  <li>Using a heated bed and untextured build plate.</li>
  <li>Disabling part cooling to slow solidification of the filament.</li>
  <li>Increasing the nozzle temperature to the limit of - or even slightly over - spec.</li>
  <li>Increasing the flow rate and layer height.</li>
  <li>Printing as slowly as possible.</li>
  <li>Using a larger nozzle diameter.</li>
</ul>

<p>All of these settings are designed to increase the bond between layers as much as possible, by making those layers thicker and hotter, and reducing how quickly they cool. Increasing the flow rate, too, causes layer lines to be rounder; this, too, has a positive impact on the optical characteristics of the panel. Again, as I was focused primarily on accessibility, I only changed things which could be changed without the purchase of new parts. That means printing on the standard textured build plate and using the stock nozzle diameter of 0.4mm.</p>

<p>I experimented with several settings on the P1S with differing results:</p>

<table>
  <thead>
    <tr>
      <th>Nozzle Temp</th>
      <th>Layers</th>
      <th>Bed</th>
      <th>Fans</th>
      <th>Print Speed</th>
      <th>Ironing</th>
      <th>Flow Rate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>210</td>
      <td>0.2mm</td>
      <td>50C</td>
      <td>100%</td>
      <td>100%</td>
      <td>OFF</td>
      <td>1</td>
    </tr>
    <tr>
      <td>220</td>
      <td>0.28mm</td>
      <td>50C</td>
      <td>50%</td>
      <td>75%</td>
      <td>ON**</td>
      <td>1.08*</td>
    </tr>
    <tr>
      <td>230</td>
      <td>0.3 mm</td>
      <td>55C</td>
      <td>0%</td>
      <td>50%</td>
      <td>ON**</td>
      <td>1.08*</td>
    </tr>
    <tr>
      <td>235*</td>
      <td>0.3 mm</td>
      <td>55C</td>
      <td>0%</td>
      <td>33%</td>
      <td>OFF</td>
      <td>1.1*</td>
    </tr>
  </tbody>
</table>

<p>*this setting is out of spec for either the printer or filament.</p>

<p>**this setting will increase the likelihood of nozzle clogging.</p>

<h2 id="post-processing-to-improve-transparency">Post-processing to Improve Transparency</h2>

<p>Print settings will help get close to the finished result, and this may be appropriate for use as-is in backlight applications, but in order to achieve an acceptable level of transparency to use this panel as a front light, post-processing of the sheet will be required.</p>

<p>Improving the surface finish of PLA at home is generally achieved by:</p>

<ul>
  <li>Chemical smoothing using Ethyl Acetate.</li>
  <li>Heat treatment using an iron.</li>
  <li>Sanding the surface using fine grit.</li>
</ul>

<p>Again, I’ve experimented with these options to see which is the most optimal for this application.</p>]]></content><author><name></name></author><category term="3D_Printing" /><category term="Stub" /><category term="Notes" /><summary type="html"><![CDATA[I’m working with a Bambu Lab P1S. I love it. As most of my prints are functional rather than decorative, I opted against buying the AMS.]]></summary></entry><entry><title type="html">A Brief Note About the NE555</title><link href="https://steveclark.io/electronics/555" rel="alternate" type="text/html" title="A Brief Note About the NE555" /><published>2024-04-21T13:00:00+01:00</published><updated>2024-04-21T13:00:00+01:00</updated><id>https://steveclark.io/electronics/555</id><content type="html" xml:base="https://steveclark.io/electronics/555"><![CDATA[<p><img class="m-0" src="https://letsenhance.io/static/8f5e523ee6b2479e26ecc91b9c25261e/1015f/MainAfter.jpg" />
<small class="mt-0 pt-0 italic">This is literally the first Google result for the search term “image”. Not my image.<small></small></small></p>

<p>Monostable 555s - at least in the configurations I’ve tried - will output for as long as the trigger is pulled low, even if the length of the delay based on R1 and C1 is shorter than the trigger duration. In practice, a one-shot timer configured to have a 0.01 millisecond pulse will not provide a 0.01 millisecond high output signal consistently from a button, as any deviation in the duration of the button press (over this time, at least) will be reflected in the output signal.</p>

<p>/todo - confirm the problem isn’t sat in the chair.</p>]]></content><author><name></name></author><category term="Electronics" /><category term="Stub" /><category term="Notes" /><summary type="html"><![CDATA[This is literally the first Google result for the search term “image”. Not my image.]]></summary></entry><entry><title type="html">Monitoring a 6502 with an ESP32</title><link href="https://steveclark.io/electronics/6502" rel="alternate" type="text/html" title="Monitoring a 6502 with an ESP32" /><published>2024-04-20T13:52:00+01:00</published><updated>2024-04-20T13:52:00+01:00</updated><id>https://steveclark.io/electronics/6502</id><content type="html" xml:base="https://steveclark.io/electronics/6502"><![CDATA[<p>Rockwell 6502 and 65C02 chips can’t single cycle based on the clock signal the same way as WD processors can. In order to single cycle these chips, it’s better to pull RDY low. Depending on the specific model the outcome will be different.</p>

<ul>
  <li>For the NMOS 6502, pulling RDY low will hold state on a read operation. Write operations will finish with state only held on the next read.</li>
  <li>For the CMOS 65C02, pulling RDY low will hold the state regardless of the current operation type.</li>
</ul>

<p>This is important as outputs will differ based on the specific processor in use.</p>

<p>Should I wish to try and single-clock the 65C02, the clock must be held <em>high</em> not <em>low</em>. Single stepping involves pulling the signal low for no longer than 5 microseconds. Longer than this and the integrity of data stored in registers cannot be guaranteed.</p>

<p>The NMOS 6502 cannot be held in either state.</p>

<h3 id="interfacing-with-esp32-serial-monitor">Interfacing with ESP32 Serial Monitor</h3>

<p>There are two ways I can see to single step these chips using the ESP32 Serial Monitor tool I wrote; The first of these will only work for the CMOS 65C02:</p>

<ul>
  <li>Provide the 65C02 with a constant high signal from the ESP32 on the clock in pin.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">delayMicroseconds(5)</code> in the Arduino IDE to pulse the clock low to cycle the clock.</li>
  <li>Pull the pin high again at the end of this delay.</li>
</ul>

<p>Rough Arduino sketch of this approach can be found <a href="https://github.com/stevenclark92/stESP32/blob/main/stESP32_clockPulse.ino">here</a>. It’s pretty janky but works more or less. Not a practical solution in current form.</p>

<p>I need to explore the accuracy of these delay pulses to ensure the data in registers is still valid. /todo</p>

<p>The second method I can see that would work on both processors is:</p>

<ul>
  <li>Provide a clock signal using a hardware clock. I’ll use 1 MHz for testing.</li>
  <li>Pull RDY (pin 2) low using the ESP32.</li>
  <li>Pulse RDY using <code class="language-plaintext highlighter-rouge">delayMicroseconds(1)</code> for single steps that match the 1 MHz clock frequency.</li>
</ul>

<p>This will depend on how well the microcontroller is able to accurately pulse for such short periods. Equally, the NMOS chip will continue performing writes until the next read instruction. I need to ensure - if possible - that I am able to read from the bus quickly enough that no steps are missed. It’s very hard to do this via serial at 1 MHz. It might be best to clock the NMOS chip down to its lowest stable configuration - I think it’s 100 KHz. I should be able to do this using Schmitt triggers, provided they provide a clean and stable enough signal.</p>

<p>Onwards and upwards.</p>]]></content><author><name></name></author><category term="Electronics" /><category term="Stub" /><category term="Notes" /><summary type="html"><![CDATA[Rockwell 6502 and 65C02 chips can’t single cycle based on the clock signal the same way as WD processors can. In order to single cycle these chips, it’s better to pull RDY low. Depending on the specific model the outcome will be different.]]></summary></entry><entry><title type="html">My Inventory of ICs</title><link href="https://steveclark.io/electronics/icInventory" rel="alternate" type="text/html" title="My Inventory of ICs" /><published>2024-04-20T13:52:00+01:00</published><updated>2024-04-20T13:52:00+01:00</updated><id>https://steveclark.io/electronics/icInventory</id><content type="html" xml:base="https://steveclark.io/electronics/icInventory"><![CDATA[<p>This is for my own use. It’s a catalogue of my current inventory.</p>

<h2 id="integrated-circuits">Integrated Circuits</h2>

<h3 id="cpus">CPUs</h3>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Family</th>
      <th>Qty</th>
      <th>Name</th>
      <th>Spec</th>
      <th>Technology</th>
      <th>Package</th>
      <th>Datasheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CPU</td>
      <td>6502</td>
      <td>1</td>
      <td>MOS 6502</td>
      <td>1 MHz</td>
      <td>NMOS</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/MOS_6500_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>CPU</td>
      <td>6502</td>
      <td>1</td>
      <td>Rockwell R6502AP</td>
      <td>2 MHz</td>
      <td>NMOS</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/Rockwell_R650X_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>CPU</td>
      <td>6502</td>
      <td>1</td>
      <td>Rockwell R65C02P4E</td>
      <td>4 MHz</td>
      <td>CMOS</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/Rockwell_R65CX_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>CPU</td>
      <td>68000</td>
      <td>5</td>
      <td>Motorola MC680000FN8</td>
      <td>8 MHz</td>
      <td>HMOS</td>
      <td>68-Pin PLCC</td>
      <td><a href="/assets/datasheets/mc68000.pdf">PDF</a></td>
    </tr>
  </tbody>
</table>

<h3 id="io--memory">I/O &amp; Memory</h3>

<table class="table-auto w-full my-6 text-left">
  <thead>
    <tr>
      <th>Type</th>
      <th>Family</th>
      <th>Qty</th>
      <th>Name</th>
      <th>Spec</th>
      <th>Package</th>
      <th>Datasheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>VIA</td>
      <td>6522</td>
      <td>1</td>
      <td>MOS 6522 VIA</td>
      <td>N/A</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/MOS_MCS6522_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>SRAM</td>
      <td> </td>
      <td>1</td>
      <td>Alliance AS6C62256-55PCN</td>
      <td>265Kb</td>
      <td>28-Pin DIP</td>
      <td><a href="/assets/datasheets/AS6C62256_1.2.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>EEPROM</td>
      <td> </td>
      <td>1</td>
      <td>Atmel AT28C256-15PU</td>
      <td>265Kb</td>
      <td>28-Pin DIP</td>
      <td><a href="/assets/datasheets/AT28C256-15PU.pdf">PDF</a></td>
    </tr>
  </tbody>
</table>

<h3 id="logic--timing">Logic &amp; Timing</h3>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Type</th>
      <th>Qty</th>
      <th>Name</th>
      <th>Package</th>
      <th>Datasheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Shift Register</td>
      <td>PISO</td>
      <td>5</td>
      <td>SN74HC165</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
    <tr>
      <td>Shift Register</td>
      <td>SIPO</td>
      <td>25</td>
      <td>SN74HC595N</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
    <tr>
      <td>Logic Gates</td>
      <td>NAND</td>
      <td>5</td>
      <td>CD4093 2-Input NAND Gate/Schmitt Trigger</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
    <tr>
      <td>Timer</td>
      <td>555</td>
      <td>10</td>
      <td>NE555P</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
  </tbody>
</table>

<h2 id="microcontrollers">Microcontrollers</h2>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Type</th>
      <th>Qty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Board</td>
      <td>RPi Pico</td>
      <td>1</td>
    </tr>
    <tr>
      <td>Board</td>
      <td>ESP32-S2</td>
      <td>2</td>
    </tr>
    <tr>
      <td>IC</td>
      <td>ATMEGA328P</td>
      <td>1</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="Electronics" /><category term="Inventory" /><category term="Specs" /><summary type="html"><![CDATA[This is for my own use. It’s a catalogue of my current inventory.]]></summary></entry></feed>
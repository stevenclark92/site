<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://steveclark.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://steveclark.io/" rel="alternate" type="text/html" /><updated>2024-06-29T17:44:41+01:00</updated><id>https://steveclark.io/feed.xml</id><title type="html">steveclark.io</title><subtitle>tbd</subtitle><entry><title type="html">Intro to Kindleology</title><link href="https://steveclark.io/electronics/kindle-serial-uart" rel="alternate" type="text/html" title="Intro to Kindleology" /><published>2024-05-04T13:00:00+01:00</published><updated>2024-05-04T13:00:00+01:00</updated><id>https://steveclark.io/electronics/kindle-serial-uart</id><content type="html" xml:base="https://steveclark.io/electronics/kindle-serial-uart"><![CDATA[<p>Recently, I purchased my fifth Amazon Kindle in twice as many years. My buying habits are not motivated by a desire to have the latest and greatest at all times - my phones and laptops generally last for many years, and I only upgrade them begrudgingly - instead, the Kindle coincidentally manages to be perfectly designed both for its intended function and to be lost or broken by me.</p>

<p>My issue lies categorically outside the device’s design, and the few Amazon devices I’ve owned that have passed from natural causes have only done so at the end of a long and useful lifespan. It’s a prime example of PICNIC, one I’m compelled to address.</p>

<h3 id="the-perks-of-being-a-wallflower-brain-disabled">The perks of being a <del>wallflower</del> brain disabled</h3>

<p>Concurrently, the neurodivergence implicated in the incessant loss of and damage to my possessions has sparked a lifelong and unyielding desire to take absolutely everything apart to see how it works. My first thought from a young age upon seeing a functioning electronic device has always been: <strong>“Absolutely, categorically, and definitively not”.</strong></p>

<p>Starting around age 6, the majority of my belongings have - at one time or another - found themselves strapped to Dr Frankenstein Jr’s table, fixed by the monstrous glare of a half-pint mad scientist gleefully prying component after component free from the shackles of its housing, only to have the boy’s well of motivation run dry approximately two-thirds of the way through putting the screws back in. The Kindles I’ve owned as an adult have fared only slightly better.</p>

<p>In much the same way that a child learns to untie its shoes long before it learns to fasten them alone, from a youth spent torturing electronics came (much, much later) the ability to <em>unbreak</em> them. Today, most of my devices find shelter under the protection spell of ‘having a warranty I don’t want to void’, but broken and old devices remain ripe for experimentation and potential salvation. To date, I’ve found a serviceable bodge for most day-to-day electronics issues short of leaving things on a bus - at least, one that will last until I find time to order a replacement.</p>

<p>This time, however, the goal is not merely to restore stock functionality; I want to surpass it.</p>

<h3 id="dont-try-this-at-home-if-you-dont-know-what-youre-doing">Don’t try this at home if you don’t know what you’re doing.</h3>

<p>This article is part of a planned series where I will explore how to perform a total hardware and software diagnostic and repair of a broken Kindle Voyage, before outlining possible modifications for those with the requisite technical skills. Many of these steps will equally apply to other devices for reasons that will become obvious, but I will disclaim early that <strong>this is not intended to be a guide or to act as instructions</strong>. If you choose to follow in my footsteps, <strong>on your head be any damage to your devices or statutory standing with Amazon</strong>.</p>

<p>I will cite my sources and share the resources I found throughout this process; however, most information has been sourced from the depths of long-dead forum posts and Reddit threads. If I have included a piece of information or a fragment of code that you have created, and I have failed to acknowledge your contribution appropriately, please do reach out so that I can do so.</p>

<p>I must also state that I have no political motivation for this article, nor is it intended to lambast Jeff Bezos or his organization. I believe that I own my devices and have the right to do what I want with them - and that Amazon has the right to keep selling as many new products as they like and withhold support when I inevitably mess something up.</p>

<p>With disclaimers disclaimed and backs covered, let’s get into it.</p>

<h2 id="the-kindle-voyage">The Kindle Voyage</h2>

<p>I started this journey for a specific reason: the Kindle Voyage, released a decade ago this year, was only sold for a limited time, I like it a lot, and you can’t buy it anymore. Occupying a niche above the Paperwhite but at a price point that remained within reach of most consumers, the Voyage offered a better display, automatic brightness adjustment and a more refined design. It had dedicated page turn buttons and haptic feedback, but retained the original form factor and simplicity. It is universally considered one of the best e-book readers ever made, and for me, it occupies the top spot comfortably even now.</p>

<p>[Voyage pic]</p>

<p>Sadly, not long after the only generation of the Kindle Voyage was released, it was retired from sale and replaced by the bigger and more feature-filled Oasis. The Oasis is a lovely device, but with a significantly increased footprint and price, the mid-tier market had to decide between entry-level models or a much higher-end product following the EOL of the Kindle Voyage. The majority bought Paperwhites, but the lack of a direct successor has also driven significant and sustained demand for second-hand Voyages. I find myself in this camp. I <em>could</em> shell out £300 for a Scribe (a brilliant device, itself having replaced the Oasis) or step down to the Paperwhite, but I shall only do so kicking and screaming.</p>

<h3 id="e-book-readers-as-tablet-computers">E-Book Readers as Tablet Computers</h3>

<p>The Kindle Voyage, like all e-book readers, is just a low-end tablet computer. The main (only) distinction between these and other products in their category is the type of screen used. Many other features that set these devices apart from peers in their cohort - such as drastically extended battery life - are secondary benefits that stem from this single architectural decision.</p>

<p><a href="CITE">E-paper displays significantly reduce eye strain compared to other displays</a> but cannot refresh at sub-second intervals due to hardware limitations. There are many articles about this online, so I’ll stop short of a full explanation aside from the most relevant part: Most LCDs used in phones and tablets refresh at 60 Hz or more, but the displays used in e-book readers (partial refresh notwithstanding) generally do so at between 0.25-4 Hz. Higher is possible, but tradeoffs abound beyond this point and I’ve yet to meet anyone who can read four pages per second or more.</p>

<p>Refreshing more slowly requires less power, which means less need for large batteries, leading to smaller, lighter products. LCDs also require current to maintain an image where e-paper displays don’t, but it’s negligible compared to the power required to change state.</p>

<h3 id="slow-and-steady-wins">Slow and Steady Wins</h3>

<p>Rendering greyscale pages very slowly is not particularly intensive from a computational standpoint. As a result, e-book producers rarely tweak more than the herbs and spices; significant hardware revisions are infrequent. Most devices released between 2012 and 2019 are virtually identical behind the bezel, and almost all Kindle variants released in this period used the same processor.  More expensive iterations added touch and light, but the heavy lifting was performed by the same chip, with only minor increases in RAM and eMMC sizes between successive generations.</p>

<p>Arguably, the only technology category that has progressed more slowly than the e-book reader is the book itself. But then, if the fleshy technology doing the reading remains unchanged, why would the silicon that provides the material need to continue to improve once perfected? Using similar hardware under the hood means better ability to support devices long-term, faster iteration of peripheral features, and lower production costs - not to mention the reduced need for environmentally costly factory retooling and the disposal of obsolete components.</p>

<p>The current device line-up as of 2022 represents the first significant hardware revision to Kindles since 2013, and while the processor hails from a new vendor and the RAM has doubled to 1 GB, the primary benefit is 64-bit architecture rather than additional speed. Newer models have an identically clocked processor and perform similarly in benchmarks, so there’s little reason a Kindle from the 2010s couldn’t accomplish the same tasks as one purchased today. Aside from web browsing. And as long as you don’t ask it to play nice with RAM, ROM or files larger than 4 GB. Or look as appealing. Totally the same otherwise.</p>

<h3 id="isnt-that-planned-obsolescence">Isn’t that planned obsolescence?</h3>

<p>No. As simple as e-book readers are by modern technological standards, the regular release cycle of devices is less about cashing in on the desire for novelty and continued forward progression; all electronic devices have a finite lifespan, and a handful of unavoidable failure points render these devices - and most others - unusable after a decade or so of service. The free market guides the rest. </p>

<p>Sure, you could make things easier to repair, but give credit where it’s due - most Kindle devices get at least an 8/10 for repairability from iFixit. Even where the best possible care is always maintained, entropy sees to it that one of the following issues will arise with increasing probability over time in <em>any</em> portable electronic device:</p>

<ul>
  <li>
    <p>Lithium-ion batteries have extremely finite lifespans.</p>
  </li>
  <li>
    <p>eMMC has a limited number of write cycles.</p>
  </li>
  <li>
    <p>USB connectors fail, as do solder joints.</p>
  </li>
  <li>
    <p>Liquid and dust cause corrosion and shorts.</p>
  </li>
  <li>
    <p>People like me get brave and brick them by deleting or corrupting firmware.</p>
  </li>
  <li>
    <p>People brick them following standard update procedures.</p>
  </li>
  <li>
    <p>Software developers tire of porting code to legacy components and sunset perfectly usable devices in favour of supporting the newer, shinier versions.</p>
  </li>
</ul>

<p>All these issues are fixable, but diagnostics are costly and time-consuming, and no two devices will have the same repair pathway. Repackaging the same processor and adding a couple of extra features at intervals that roughly align with the expected end-of-life of legacy devices is easy, profitable, and a sensible play from a business standpoint.</p>

<h3 id="so-why-not-just-buy-a-new-one">So why not just buy a new one?</h3>

<p>Even if it’s unavoidable, I still find it a crying shame from an environmental standpoint that an e-book reader from 2014 with virtual feature parity with one from 2021 will be relegated to a drawer, eBay listing or landfill, never again to serve its intended purpose. </p>

<p><em>“I can fix you”, I think to myself as I scroll through the sea of battered devices, “I will fix you”.</em></p>

<p>As a result of slow progress and my clumsiness, more than once, I have paid the same price, years apart, <em>for the same hardware</em>. Obviously, a product has greater value than the sum cost of its components, but I’m not concerned with that for this project. My motivation is simple:</p>

<ul>
  <li>
    <p>Because <strong><em>I can.</em></strong></p>
  </li>
  <li>
    <p>Because <strong><em>it’s fun.</em></strong></p>
  </li>
</ul>

<p>There’s little more to it than that, and I don’t mean for this post to bring device value into question, nor do I have a strong opinion on that. It’s worth what people are willing to pay. As it turns out, I was willing to pay £20 and three weekends of my life spent descending yet further into madness. Go figure.</p>

<h2 id="waffleoveronto-the-hardware">Waffle over; onto the hardware</h2>

<p>Inside the Kindle Voyage, you will find:</p>

<ul>
  <li>
    <p>A Freescale Semiconductor <a href="http://www.freescale.com/docs/pcn_attachments/16116_IMX6SLCEC.pdf">MCIMX6L8DVN10AB</a> Applications Processor, with a single 32-bit core clocked at 1GHz.</p>
  </li>
  <li>
    <p>4 GB (32 Gb) of Toshiba <a href="http://datasheet.octopart.com/THGBM5G5A1JBAIR-Toshiba-datasheet-14049752.pdf">THGBM5G5A1JBAIR</a> eMMC NAND Flash.</p>
  </li>
  <li>
    <p>512 MB (4 Gb) of Samsung K4P4G324EQ-RGC2 LPDDR2 SDRAM.</p>
  </li>
  <li>
    <p>A Texas Instruments <a href="http://www.ti.com/product/drv2667">DRV2667</a> Piezo Haptic Driver.</p>
  </li>
</ul>

<p>– Include Reference Architecture –</p>

<p>The NXP i.MX processors are ARM-based SoCs designed for low-power mobile devices. They’re not the fastest, but they’re full-featured ARM Cortex-based processors well-suited for this application. 512 MB of RAM sounds tiny compared to a modern phone or laptop, but considering the device spends most of its waking time gently cycling through pages of monochrome text, there’s little need for more. Even the limited storage space provides ample capacity for thousands of e-books - even the current flagship model offers only 8 GB of storage and 1 GB of RAM a decade later; plenty for its intended use case.</p>]]></content><author><name></name></author><category term="Electronics" /><category term="rK" /><category term="Kindle" /><summary type="html"><![CDATA[Recently, I purchased my fifth Amazon Kindle in twice as many years. My buying habits are not motivated by a desire to have the latest and greatest at all times - my phones and laptops generally last for many years, and I only upgrade them begrudgingly - instead, the Kindle coincidentally manages to be perfectly designed both for its intended function and to be lost or broken by me.]]></summary></entry><entry><title type="html">Key 6502 Addresses</title><link href="https://steveclark.io/electronics/6502-Addresses" rel="alternate" type="text/html" title="Key 6502 Addresses" /><published>2024-04-28T13:52:00+01:00</published><updated>2024-04-28T13:52:00+01:00</updated><id>https://steveclark.io/electronics/6502%20Addresses</id><content type="html" xml:base="https://steveclark.io/electronics/6502-Addresses"><![CDATA[<p>The 6502 will attempt to use several hard-coded addresses during normal operation; the presence of usable RAM or ROM at these locations is imperative for useful function. The former of these correspond to specific pages (which are each 256 bits long). The latter is an address, ideally stored in ROM, that is read during initialisation and from which the 6502 will begin to read instructions upon boot.</p>

<ul>
  <li>The zero page (ZP) is heavily used for storing registers.</li>
  <li>The second page is reserved for the stack, addresses 256-511 (0100-01FF).</li>
  <li>The two bytes of address space at addresses 65532-65533 (FFFC-FFFD) are reserved for initialisation.</li>
</ul>

<p>I’ll probably update this stub to include more non-address-centric information. <a href="http://wilsonminesco.com/6502primer/">This guide has been a fantastic help</a>.</p>]]></content><author><name></name></author><category term="Electronics" /><category term="6502" /><category term="Specs" /><summary type="html"><![CDATA[The 6502 will attempt to use several hard-coded addresses during normal operation; the presence of usable RAM or ROM at these locations is imperative for useful function. The former of these correspond to specific pages (which are each 256 bits long). The latter is an address, ideally stored in ROM, that is read during initialisation and from which the 6502 will begin to read instructions upon boot.]]></summary></entry><entry><title type="html">3D Printing a Transparent PLA Light Diffuser</title><link href="https://steveclark.io/3d_printing/3D-Printing-a-Transparent-Diffuser" rel="alternate" type="text/html" title="3D Printing a Transparent PLA Light Diffuser" /><published>2024-04-27T09:52:00+01:00</published><updated>2024-04-27T09:52:00+01:00</updated><id>https://steveclark.io/3d_printing/3D%20Printing%20a%20Transparent%20Diffuser</id><content type="html" xml:base="https://steveclark.io/3d_printing/3D-Printing-a-Transparent-Diffuser"><![CDATA[<p><img src="https://www.additive-x.com/shop/pub/media/catalog/product/cache/69c0836d7a09588992d42550a1461e94/b/a/bambu_lab_p1s.png" alt="Bambu Lab P1S - without the optional AMS" />
<small class="mt-0 pt-0 italic">I’m working with a Bambu Lab P1S. I love it. As most of my prints are functional rather than decorative, I opted against buying the AMS.<small></small></small></p>

<h2 id="light-diffusion-in-non-oled-displays">Light diffusion in non-OLED displays</h2>

<p>The concept behind edge-lit diffuser panels is fairly straightforward. A light source illuminates the edge of flat piece of transparent material that has been made partially opaque through the inclusion of additives, laser engraving or chemical etching, gently diffusing the light.</p>

<p>The opacity of the material is low enough that 90% of visible light will pass between the panel’s faces unimpeded, but is great enough that the majority of light passing perpendicularly - traversing the material from edge to edge - will not. This light is instead absorbed and scattered by the material’s inclusions, creating a diffuse glow from each face that serves as an excellent source of uniform illumination.</p>

<p>This technique is found ubiquitously in displays, as well as everything from billboards and photography studios to interior design schemes and hospital wards. It’s even been used to create rudimentary touch interfaces by replacing light in the visible spectrum with a source of infrared and <a href="https://www.instructables.com/Low-Cost-Multi-touch-Whiteboard-using-the-Wii-Remo/" target="_blank">employing the tactical use of a Wiimote</a>.</p>

<h2 id="3d-printing-fdm-a-suitable-prototype-panel">3D printing (FDM) a suitable prototype panel</h2>

<p>My current project involves front lighting an e-paper display. After much research into glass etching techniques and wholesale shipping costs of industrial acrylic, I realised one of the core challenges 3D printing enthusiasts face using transparent FDM filaments - that the end result is typically cloudy - was the answer all along.</p>

<p>My goal is to explore whether or not transparent PLA could be the missing option for those looking for an accessible way of producing evenly diffused lighting for their projects without the need for strong acids, meticulous sanding or shipping metre-long panels of plastic thousands of miles.</p>

<p>Other filaments - particularly PETG and ABS - would ostensibly be better suited to this purpose based on their ability to provide a more transparent end result. The barriers I see with these materials over PLA are the need for a heated enclosure and the amount of VOCs released. While my home setup can overcome the former, the latter is still a primary concern; PLA may not be the perfect material for the job, but it’s certainly safer to print in a small apartment than engineering-grade plastics.</p>

<p>In a similar vein, resin printing would also likely make a good candidate for this, too, but I don’t have access to a resin printer, my partner would likely pack their bags if I bought home any more toys, and I’d rather avoid the use of those chemicals in my home.</p>

<h2 id="selecting-a-filament">Selecting a Filament</h2>

<p>There is an abundance of PLA options on the market with various additives, resultant characteristics, and price points. As the core requirement of this project was accessibility to the greatest number of home enthusiasts, I opted against using a premium option. PLA for the most part - additives or not - is PLA. I simply selected the cheapest transparent option available with next-day shipping from Amazon, which at the time of writing was Elegoo’s Transparent PLA+. I believe this cost £12 (~$15).</p>

<h2 id="dialling-in-print-settings">Dialling in Print Settings</h2>

<p>A material’s transparency and optical characteristics are heavily impacted by its uniformity, which makes achieving an acceptable end result using FDM printing a challenge. Layer lines are part of the issue, but equally, layer adhesion and differences in cooling speed also play a role in the product’s finish. In broad terms, best results are achieved by:</p>

<ul>
  <li>Using a heated bed and untextured build plate.</li>
  <li>Disabling part cooling to slow solidification of the filament.</li>
  <li>Increasing the nozzle temperature to the limit of - or even slightly over - spec.</li>
  <li>Increasing the flow rate and layer height.</li>
  <li>Printing as slowly as possible.</li>
  <li>Using a larger nozzle diameter.</li>
</ul>

<p>In simple terms: print hot, print thick, and print slow. All of these settings serve to increase the bond between layers as much as possible. Increasing the flow rate is purported to have a positive impact on the optical characteristics of the end result, but in my own experimentation this had rapidly diminishing returns.</p>

<p>During my experimentation I only changed variables that wouldn’t necessitate the purchase of additional parts. That meant printing on the standard textured build plate and using the stock nozzle with a diameter of 0.4mm.</p>

<p>I experimented with several settings on the P1S with differing results:</p>

<table>
  <thead>
    <tr>
      <th>Nozzle Temp</th>
      <th>Layers</th>
      <th>Bed</th>
      <th>Fans</th>
      <th>Print Speed</th>
      <th>Ironing</th>
      <th>Flow Rate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>210</td>
      <td>0.2mm</td>
      <td>50C</td>
      <td>100%</td>
      <td>100%</td>
      <td>OFF</td>
      <td>0.98</td>
    </tr>
    <tr>
      <td>220</td>
      <td>0.28mm</td>
      <td>50C</td>
      <td>50%</td>
      <td>75%</td>
      <td>ON**</td>
      <td>1.08**</td>
    </tr>
    <tr>
      <td>230</td>
      <td>0.3 mm</td>
      <td>55C</td>
      <td>0%</td>
      <td>50%</td>
      <td>ON**</td>
      <td>1.08**</td>
    </tr>
    <tr>
      <td>235*</td>
      <td>0.3 mm</td>
      <td>55C</td>
      <td>0%</td>
      <td>33%</td>
      <td>OFF</td>
      <td>1.1**</td>
    </tr>
  </tbody>
</table>

<p>*this setting is out of spec for either the printer or filament.</p>

<p>**this setting will increase the likelihood of nozzle clogging.</p>

<h2 id="post-processing-to-improve-transparency">Post-processing to Improve Transparency</h2>

<p>Print settings will help get close to the finished result, and this may be appropriate for use as-is in backlight applications, but in order to achieve an acceptable level of transparency to use this panel as a front light, post-processing of the sheet will be required.</p>

<p>Improving the surface finish of PLA at home is generally achieved by:</p>

<ul>
  <li>Chemical smoothing using Ethyl Acetate.</li>
  <li>Heat treatment using an iron.</li>
  <li>Sanding the surface using fine grit.</li>
</ul>

<p>Again, I’ve experimented with these options to see which is the most optimal for this application.</p>]]></content><author><name></name></author><category term="3D_Printing" /><category term="Stub" /><category term="Notes" /><summary type="html"><![CDATA[I’m working with a Bambu Lab P1S. I love it. As most of my prints are functional rather than decorative, I opted against buying the AMS.]]></summary></entry><entry><title type="html">A Brief Note About the NE555</title><link href="https://steveclark.io/electronics/555" rel="alternate" type="text/html" title="A Brief Note About the NE555" /><published>2024-04-21T13:00:00+01:00</published><updated>2024-04-21T13:00:00+01:00</updated><id>https://steveclark.io/electronics/555</id><content type="html" xml:base="https://steveclark.io/electronics/555"><![CDATA[<p><img class="m-0" src="https://letsenhance.io/static/8f5e523ee6b2479e26ecc91b9c25261e/1015f/MainAfter.jpg" />
<small class="mt-0 pt-0 italic">This is literally the first Google result for the search term “image”. Not my image.<small></small></small></p>

<p>Monostable 555s - at least in the configurations I’ve tried - will output for as long as the trigger is pulled low, even if the length of the delay based on R1 and C1 is shorter than the trigger duration. In practice, a one-shot timer configured to have a 0.01 millisecond pulse will not provide a 0.01 millisecond high output signal consistently from a button, as any deviation in the duration of the button press (over this time, at least) will be reflected in the output signal.</p>

<p>/todo - confirm the problem isn’t sat in the chair.</p>]]></content><author><name></name></author><category term="Electronics" /><category term="Stub" /><category term="Notes" /><summary type="html"><![CDATA[This is literally the first Google result for the search term “image”. Not my image.]]></summary></entry><entry><title type="html">Monitoring a 6502 with an ESP32</title><link href="https://steveclark.io/electronics/6502" rel="alternate" type="text/html" title="Monitoring a 6502 with an ESP32" /><published>2024-04-20T13:52:00+01:00</published><updated>2024-04-20T13:52:00+01:00</updated><id>https://steveclark.io/electronics/6502</id><content type="html" xml:base="https://steveclark.io/electronics/6502"><![CDATA[<p>Rockwell 6502 and 65C02 chips can’t single cycle based on the clock signal the same way as WD processors can. In order to single cycle these chips, it’s better to pull RDY low. Depending on the specific model the outcome will be different.</p>

<ul>
  <li>For the NMOS 6502, pulling RDY low will hold state on a read operation. Write operations will finish with state only held on the next read.</li>
  <li>For the CMOS 65C02, pulling RDY low will hold the state regardless of the current operation type.</li>
</ul>

<p>This is important as outputs will differ based on the specific processor in use.</p>

<p>Should I wish to try and single-clock the 65C02, the clock must be held <em>high</em> not <em>low</em>. Single stepping involves pulling the signal low for no longer than 5 microseconds. Longer than this and the integrity of data stored in registers cannot be guaranteed.</p>

<p>The NMOS 6502 cannot be held in either state.</p>

<h3 id="interfacing-with-esp32-serial-monitor">Interfacing with ESP32 Serial Monitor</h3>

<p>There are two ways I can see to single step these chips using the ESP32 Serial Monitor tool I wrote; The first of these will only work for the CMOS 65C02:</p>

<ul>
  <li>Provide the 65C02 with a constant high signal from the ESP32 on the clock in pin.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">delayMicroseconds(5)</code> in the Arduino IDE to pulse the clock low to cycle the clock.</li>
  <li>Pull the pin high again at the end of this delay.</li>
</ul>

<p>Rough Arduino sketch of this approach can be found <a href="https://github.com/stevenclark92/stESP32/blob/main/stESP32_clockPulse.ino">here</a>. It’s pretty janky but works more or less. Not a practical solution in current form.</p>

<p>I need to explore the accuracy of these delay pulses to ensure the data in registers is still valid. /todo</p>

<p>The second method I can see that would work on both processors is:</p>

<ul>
  <li>Provide a clock signal using a hardware clock. I’ll use 1 MHz for testing.</li>
  <li>Pull RDY (pin 2) low using the ESP32.</li>
  <li>Pulse RDY using <code class="language-plaintext highlighter-rouge">delayMicroseconds(1)</code> for single steps that match the 1 MHz clock frequency.</li>
</ul>

<p>This will depend on how well the microcontroller is able to accurately pulse for such short periods. Equally, the NMOS chip will continue performing writes until the next read instruction. I need to ensure - if possible - that I am able to read from the bus quickly enough that no steps are missed. It’s very hard to do this via serial at 1 MHz. It might be best to clock the NMOS chip down to its lowest stable configuration - I think it’s 100 KHz. I should be able to do this using Schmitt triggers, provided they provide a clean and stable enough signal.</p>

<p>Onwards and upwards.</p>]]></content><author><name></name></author><category term="Electronics" /><category term="Stub" /><category term="Notes" /><summary type="html"><![CDATA[Rockwell 6502 and 65C02 chips can’t single cycle based on the clock signal the same way as WD processors can. In order to single cycle these chips, it’s better to pull RDY low. Depending on the specific model the outcome will be different.]]></summary></entry><entry><title type="html">My Inventory of ICs</title><link href="https://steveclark.io/electronics/IC-Inventory" rel="alternate" type="text/html" title="My Inventory of ICs" /><published>2024-04-20T13:52:00+01:00</published><updated>2024-04-20T13:52:00+01:00</updated><id>https://steveclark.io/electronics/IC%20Inventory</id><content type="html" xml:base="https://steveclark.io/electronics/IC-Inventory"><![CDATA[<p>This is for my own use. It’s a catalogue of my current inventory.</p>

<h2 id="integrated-circuits">Integrated Circuits</h2>

<h3 id="cpus">CPUs</h3>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Family</th>
      <th>Qty</th>
      <th>Name</th>
      <th>Spec</th>
      <th>Technology</th>
      <th>Package</th>
      <th>Datasheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CPU</td>
      <td>6502</td>
      <td>1</td>
      <td>MOS 6502</td>
      <td>1 MHz</td>
      <td>NMOS</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/MOS_6500_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>CPU</td>
      <td>6502</td>
      <td>1</td>
      <td>Rockwell R6502AP</td>
      <td>2 MHz</td>
      <td>NMOS</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/Rockwell_R650X_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>CPU</td>
      <td>6502</td>
      <td>1</td>
      <td>Rockwell R65C02P4E</td>
      <td>4 MHz</td>
      <td>CMOS</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/Rockwell_R65CX_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>CPU</td>
      <td>68000</td>
      <td>5</td>
      <td>Motorola MC680000FN8</td>
      <td>8 MHz</td>
      <td>HMOS</td>
      <td>68-Pin PLCC</td>
      <td><a href="/assets/datasheets/mc68000.pdf">PDF</a></td>
    </tr>
  </tbody>
</table>

<h3 id="io--memory">I/O &amp; Memory</h3>

<table class="table-auto w-full my-6 text-left">
  <thead>
    <tr>
      <th>Type</th>
      <th>Family</th>
      <th>Qty</th>
      <th>Name</th>
      <th>Spec</th>
      <th>Package</th>
      <th>Datasheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>VIA</td>
      <td>6522</td>
      <td>1</td>
      <td>MOS 6522 VIA</td>
      <td>N/A</td>
      <td>40-Pin DIP</td>
      <td><a href="/assets/datasheets/MOS_MCS6522_Datasheet.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>SRAM</td>
      <td> </td>
      <td>1</td>
      <td>Alliance AS6C62256-55PCN</td>
      <td>265Kb</td>
      <td>28-Pin DIP</td>
      <td><a href="/assets/datasheets/AS6C62256_1.2.pdf">PDF</a></td>
    </tr>
    <tr>
      <td>EEPROM</td>
      <td> </td>
      <td>1</td>
      <td>Atmel AT28C256-15PU</td>
      <td>265Kb</td>
      <td>28-Pin DIP</td>
      <td><a href="/assets/datasheets/AT28C256-15PU.pdf">PDF</a></td>
    </tr>
  </tbody>
</table>

<h3 id="logic--timing">Logic &amp; Timing</h3>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Type</th>
      <th>Qty</th>
      <th>Name</th>
      <th>Package</th>
      <th>Datasheet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Shift Register</td>
      <td>PISO</td>
      <td>5</td>
      <td>SN74HC165</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
    <tr>
      <td>Shift Register</td>
      <td>SIPO</td>
      <td>25</td>
      <td>SN74HC595N</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
    <tr>
      <td>Logic Gates</td>
      <td>NAND</td>
      <td>5</td>
      <td>CD4093 2-Input NAND Gate/Schmitt Trigger</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
    <tr>
      <td>Timer</td>
      <td>555</td>
      <td>10</td>
      <td>NE555P</td>
      <td>16-Pin DIP</td>
      <td>TBA</td>
    </tr>
  </tbody>
</table>

<h2 id="microcontrollers">Microcontrollers</h2>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Type</th>
      <th>Qty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Board</td>
      <td>RPi Pico</td>
      <td>1</td>
    </tr>
    <tr>
      <td>Board</td>
      <td>ESP32-S2</td>
      <td>2</td>
    </tr>
    <tr>
      <td>IC</td>
      <td>ATMEGA328P</td>
      <td>1</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="Electronics" /><category term="Inventory" /><category term="Specs" /><summary type="html"><![CDATA[This is for my own use. It’s a catalogue of my current inventory.]]></summary></entry></feed>